name: Docker

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main


env:
  IMAGE_NAME: prbed-teamdit

  POSTGRES_HOST: prbed-postgres-team-dit
  POSTGRES_PORT: 5432
  POSTGRES_DATABASE: postgres
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres

  JWT_SECRET: jwt_secret

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:11
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Extract branch name
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        shell: bash
        id: extract_branch
      - name: Example .env
        run: mv example.env .env
      - name: Grant execute permission for Maven wrapper
        run: chmod +x mvnw
      - name: Build with Maven
        run: ./mvnw compile package
      - name: Upload jar for docker
        uses: actions/upload-artifact@v2
        with:
          name: jar
          path: target/vliegmaatschappij-0.0.1-SNAPSHOT.jar

    # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    needs: test

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2
      - name: Download built jar
        uses: actions/download-artifact@v2
        with:
          name: jar

      - name: Move jar to folder
        run: mkdir target && mv vliegmaatschappij-0.0.1-SNAPSHOT.jar target/

      - name: Build image
        run: docker build . --file Dockerfile.web --tag $IMAGE_NAME

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository }}/$IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

      - name: Deploy image
        run: |
          docker tag $IMAGE_NAME registry.heroku.com/prbed-team-dit-app/web
          echo "${{ secrets.HEROKU_API_KEY }}" | docker login registry.heroku.com --username=_ --password-stdin
          docker push registry.heroku.com/prbed-team-dit-app/web

          HEROKU_API_KEY="${{ secrets.HEROKU_API_KEY }}" heroku container:push --app prbed-team-dit-app --recursive
          HEROKU_API_KEY="${{ secrets.HEROKU_API_KEY }}" heroku container:release web --app prbed-team-dit-app