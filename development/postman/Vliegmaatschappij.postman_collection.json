{
	"info": {
		"_postman_id": "8a44392e-33b7-4e68-910d-74f56afcab51",
		"name": "Vliegmaatschappij",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "auth",
			"item": [
				{
					"name": "Register",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/hal+json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"admin\",\r\n    \"firstName\": \"Ad\",\r\n    \"lastName\": \"Min\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/register",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Succesfully logged in!\", () => {\r",
									"    pm.expect(pm.response.code === 200);\r",
									"\r",
									"})\r",
									"\r",
									"  if (pm.response.code === 200) {\r",
									"    const authHeader = pm.response.headers.get(\"Authorization\");\r",
									"    const token = authHeader.substring(7);\r",
									"    pm.collectionVariables.set(\"authToken\", token);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/hal+json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/login",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Airport",
			"item": [
				{
					"name": "Get Airports",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"All airports succesfully fetched!\", () => {\r",
									"\r",
									"   if(pm.response.code === 403 || pm.response.code === 401){\r",
									"        throw new Error(\"Unauthorized\");\r",
									"    };\r",
									"    \r",
									"    \r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"    \r",
									"\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/airport",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"airport"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Airport",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"airport succesfully made!\",() => {\r",
									"   if(pm.response.code === 403 || pm.response.code === 401){\r",
									"        throw new Error(\"Unauthorized\");\r",
									"    };\r",
									"    \r",
									"    \r",
									" const data = pm.response.json();\r",
									" const input = JSON.parse(pm.request.body.raw);\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									" \r",
									"    pm.expect([...Object.values(input)].includes(null)).to.be.false;\r",
									"\r",
									"    pm.expect(data).to.have.all.keys('code', 'name','city','country','longitude','latitude');\r",
									"    pm.expect(input).to.have.all.keys('code', 'name','city','country','longitude','latitude');\r",
									"  \r",
									"    pm.expect(typeof data.name == \"string\").to.be.true;\r",
									"    pm.expect(typeof data.code == \"string\").to.be.true;\r",
									"    pm.expect(typeof data.country == \"string\").to.be.true;\r",
									"    pm.expect(typeof data.longitude == \"number\").to.be.true;\r",
									"    pm.expect(typeof data.latitude == \"number\").to.be.true;\r",
									"    \r",
									"    pm.expect(typeof input.name == \"string\").to.be.true;\r",
									"    pm.expect(typeof input.code == \"string\").to.be.true;\r",
									"    pm.expect(typeof input.country == \"string\").to.be.true;\r",
									"    pm.expect(typeof input.longitude == \"number\").to.be.true;\r",
									"    pm.expect(typeof input.latitude == \"number\").to.be.true;\r",
									"    \r",
									"    \r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"code\": \"SHIP\",\r\n    \"name\": \"schiphol\",\r\n    \"city\": \"amsterdam\",\r\n    \"country\": \"netherlands\",\r\n    \"longitude\": 132,\r\n    \"latitude\": 83838\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/airport",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"airport"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Airport by Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"airport succesfully fetched!\", () => {\r",
									"   if(pm.response.code === 403 || pm.response.code === 401){\r",
									"        throw new Error(\"Unauthorized\");\r",
									"    };\r",
									"    \r",
									"        \r",
									"let data = pm.response.json();\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"    \r",
									"    pm.expect(data).to.have.all.keys('code', 'airportName','city','country','longitude','latitude');\r",
									"    pm.expect([...Object.values(data)].includes(null)).to.be.false;\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/airport/SHIP",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"airport",
								"SHIP"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Airport by Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"airport succesfully deleted!\", () => {\r",
									"\r",
									"   if(pm.response.code === 403 || pm.response.code === 401){\r",
									"        throw new Error(\"Unauthorized\");\r",
									"    };\r",
									"    \r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,202,204,404]);\r",
									"    \r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/airport/SHIP",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"airport",
								"SHIP"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Airport",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"airport succesfully changed!\",() => {\r",
									"   if(pm.response.code === 403 || pm.response.code === 401){\r",
									"        throw new Error(\"Unauthorized\");\r",
									"    };\r",
									"    \r",
									" const data = pm.response.json();\r",
									" const input = JSON.parse(pm.request.body.raw);\r",
									"    \r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"    pm.expect(Object.values(pm.request.auth.bearer)[1].token.value != \"\");\r",
									" \r",
									"    pm.expect(data).to.have.all.keys('code', 'name','city','country','longitude','latitude');\r",
									"    pm.expect(input).to.have.all.keys('code', 'name','city','country','longitude','latitude');\r",
									"    \r",
									"    pm.expect(pm.request.method === \"PUT\");\r",
									"\r",
									"    \r",
									"    pm.expect(typeof data.name == \"string\");\r",
									"    pm.expect(typeof data.code == \"string\");\r",
									"    pm.expect(typeof data.country == \"string\");\r",
									"    pm.expect(typeof data.longitude == \"number\");\r",
									"    pm.expect(typeof data.latitude == \"number\");\r",
									" \r",
									"    pm.expect(input.name != null && typeof input.name == \"string\");\r",
									"    pm.expect(input.code != null && typeof input.code == \"string\");\r",
									"    pm.expect(input.country != null && typeof input.country == \"string\");\r",
									"    pm.expect(input.longitude != null && typeof input.longitude == \"number\");\r",
									"    pm.expect(input.latitude != null && typeof input.latitude == \"number\");\r",
									" \r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"code\": \"SHIP\",\r\n    \"name\": \"Deuatschland\",\r\n    \"city\": \"BERLINOO\",\r\n    \"country\": \"netherlands\",\r\n    \"longitude\": 13200,\r\n    \"latitude\": 83838\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/airport",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"airport"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{authToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "authToken",
			"value": ""
		}
	]
}